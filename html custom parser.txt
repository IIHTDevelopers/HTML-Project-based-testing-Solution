// const fs = require('fs');
// const { JSDOM } = require('jsdom');
// const axios = require('axios');
// const xmlBuilder = require('xmlbuilder');
// const { v4: uuidv4 } = require('uuid');  // Import UUID generator

// // Define TestCaseResultDto
// class TestCaseResultDto {
//     constructor(methodName, methodType, actualScore, earnedScore, status, isMandatory, errorMessage) {
//         this.methodName = methodName;
//         this.methodType = methodType;
//         this.actualScore = actualScore;
//         this.earnedScore = earnedScore;
//         this.status = status;
//         this.isMandatory = isMandatory;
//         this.errorMessage = errorMessage;
//     }
// }

// // Define TestResults
// class TestResults {
//     constructor() {
//         this.testCaseResults = {};
//         this.customData = '';
//     }
// }

// // Function to check required HTML tags
// function checkHtmlTags(htmlContent, requiredTags) {
//     const dom = new JSDOM(htmlContent);
//     const results = {};

//     requiredTags.forEach(tag => {
//         const tagFound = dom.window.document.getElementsByTagName(tag).length > 0;
//         results[tag] = tagFound ? 'pass' : 'fail';
//     });

//     return results;
// }

// // Function to check CSS properties for the elements
// function checkCssProperties(htmlContent, cssTests) {
//     const dom = new JSDOM(htmlContent);
//     const results = {};

//     // Loop through each CSS test case
//     cssTests.forEach(test => {
//         const element = dom.window.document.querySelector(test.selector);
//         if (element) {
//             const elementStyle = dom.window.getComputedStyle(element);
//             const actualValue = elementStyle.getPropertyValue(test.property);

//             // Compare the actual value with the expected value
//             const result = (actualValue === test.expectedValue) ? 'pass' : 'fail';
//             results[test.property] = result;
//         } else {
//             results[test.property] = 'fail';  // If element is not found
//         }
//     });

//     return results;
// }

// // Format results into the TestCaseResultDto structure
// function formatTestResults(results) {
//     const testCaseResult = new TestCaseResultDto(
//         'htmlFileTest',
//         'htmlCheck',
//         1,
//         results.html === 'pass' ? 1 : 0, // Example: scoring based on the presence of <html> tag
//         results.html === 'pass' ? 'Passed' : 'Failed',
//         true, // Is Mandatory
//         ''
//     );

//     const testResults = new TestResults();
//     const GUID = "d805050e-a0d8-49b0-afbd-46a486105170";  // Generate a unique GUID for each test case
//     testResults.testCaseResults[GUID] = testCaseResult;
//     testResults.customData = 'Custom data goes here';  // Placeholder for custom data

//     return testResults;
// }

// // Generate XML report (just like Angular code)
// function generateXmlReport(result) {
//     const xml = xmlBuilder.create('test-cases')
//         .ele('case')
//         .ele('test-case-type', result.status)
//         .up()
//         .ele('name', result.methodName)
//         .up()
//         .ele('status', result.status)
//         .up()
//         .end({ pretty: true });
//     return xml;
// }

// // File paths for output files
// const outputFiles = {
//     functional: "./output_revised.txt",
//     boundary: "./output_boundary_revised.txt",
//     exception: "./output_exception_revised.txt",
//     xml: "./yaksha-test-cases.xml"
// };

// // Function to write to output files
// function writeOutputFiles(result, fileType) {
//     let resultStatus = result.status === 'Passed' ? 'PASS' : 'FAIL';
//     let output = `${result.methodName}=${resultStatus}\n`;

//     // Choose the file based on the type
//     let outputFilePath = outputFiles[fileType];
//     if (outputFilePath) {
//         fs.appendFileSync(outputFilePath, output);
//     }
// }

// // Read the custom.ih file (similar to Angular code)
// function readCustomFile() {
//     let customData = '';
//     try {
//         customData = fs.readFileSync('../custom.ih', 'utf8');
//     } catch (err) {
//         console.error('Error reading custom.ih file:', err);
//     }
//     return customData;
// }

// // File path for the HTML file to check
// const filePath = 'index.html';

// // Read the HTML file and check for tags
// fs.readFile(filePath, 'utf8', async (err, data) => {
//     if (err) {
//         console.error(`Error reading file "${filePath}":`, err);
//         return;
//     }

//     // test case 1: checking html tags
//     const requiredTags = ['html', 'body', 'title', 'h2', 'table', 'thead', 'tr', 'th', 'tbody', 'td'];
//     const results = checkHtmlTags(data, requiredTags);

//     const cssTests = [
//         { selector: 'table', property: 'width', expectedValue: '80%' },
//         { selector: 'table', property: 'margin', expectedValue: '50px auto' },
//         { selector: 'th', property: 'background-color', expectedValue: 'rgb(76, 175, 80)' }, // #4CAF50 in RGB
//         { selector: 'td', property: 'padding', expectedValue: '10px' }
//     ];

//     // test case 2: Run the CSS property checks
//     const cssResults = checkCssProperties(data, cssTests);

//     console.log('CSS Test Results:');
//     console.log(cssResults);

//     console.log('Assessment Results:');
//     for (const tag in results) {
//         console.log(`${tag}: ${results[tag] === 'pass' ? 'Present' : 'NOT Present'}`);
//     }

//     // Read custom.ih file content
//     const customData = readCustomFile();

//     // Format the results to send to the server
//     const testResults = formatTestResults(results);
//     testResults.customData = customData; // Add custom data to the results

//     console.log("testResults");
//     console.log(testResults);
//     // Send results to the server
//     try {
//         const response = await axios.post('https://yaksha-prod-sbfn.azurewebsites.net/api/YakshaMFAEnqueue?code=jSTWTxtQ8kZgQ5FC0oLgoSgZG7UoU9Asnmxgp6hLLvYId/GW9ccoLw==', testResults, {
//             headers: {
//                 'Content-Type': 'application/json'
//             }
//         });
//         console.log('Server Response:', response.data);
//     } catch (error) {
//         console.error('Error sending results to server:', error);
//     }

//     // Generate XML report and save to file (like in Angular)
//     const xml = generateXmlReport(testResults.testCaseResults[Object.keys(testResults.testCaseResults)[0]]);
//     fs.writeFileSync('test-report.xml', xml);

//     // Write to output files (functional, boundary, exception)
//     writeOutputFiles(testResults.testCaseResults[Object.keys(testResults.testCaseResults)[0]], 'functional');
//     writeOutputFiles(testResults.testCaseResults[Object.keys(testResults.testCaseResults)[0]], 'boundary');
//     writeOutputFiles(testResults.testCaseResults[Object.keys(testResults.testCaseResults)[0]], 'exception');
// });


const fs = require('fs');
const { JSDOM } = require('jsdom');
const axios = require('axios');
const xmlBuilder = require('xmlbuilder');
const { v4: uuidv4 } = require('uuid');

// Define TestCaseResultDto
class TestCaseResultDto {
    constructor(methodName, methodType, actualScore, earnedScore, status, isMandatory, errorMessage) {
        this.methodName = methodName;
        this.methodType = methodType;
        this.actualScore = actualScore;
        this.earnedScore = earnedScore;
        this.status = status;
        this.isMandatory = isMandatory;
        this.errorMessage = errorMessage;
    }
}

// Define TestResults
class TestResults {
    constructor() {
        this.testCaseResults = {};
        this.customData = '';
    }
}

// Function to delete output files if they exist
function deleteOutputFiles() {
    const outputFiles = [
        "./output_revised.txt",
        "./output_boundary_revised.txt",
        "./output_exception_revised.txt"
    ];

    outputFiles.forEach(file => {
        // Check if the file exists
        if (fs.existsSync(file)) {
            // Delete the file if it exists
            fs.unlinkSync(file);
            console.log(`Deleted: ${file}`);
        }
    });
}

// Function to check required HTML tags
function checkHtmlTags(htmlContent, requiredTags) {
    const dom = new JSDOM(htmlContent);
    const results = {};

    requiredTags.forEach(tag => {
        const tagFound = dom.window.document.getElementsByTagName(tag).length > 0;
        results[tag] = tagFound ? 'pass' : 'fail';
    });

    return results;
}

// Function to check CSS properties for the elements
function checkCssProperties(htmlContent, cssTests) {
    const dom = new JSDOM(htmlContent);
    const results = {};

    // Loop through each CSS test case
    cssTests.forEach(test => {
        const element = dom.window.document.querySelector(test.selector);
        if (element) {
            const elementStyle = dom.window.getComputedStyle(element);
            const actualValue = elementStyle.getPropertyValue(test.property);

            // Compare the actual value with the expected value
            const result = (actualValue === test.expectedValue) ? 'pass' : 'fail';
            results[test.property] = result;
        } else {
            results[test.property] = 'fail';  // If element is not found
        }
    });

    return results;
}

// Format results into the TestCaseResultDto structure
function formatTestResults(results, methodName, methodType) {
    const testCaseResult = new TestCaseResultDto(
        methodName,
        methodType,
        1,
        Object.values(results).includes('fail') ? 0 : 1, // If any result is 'fail', set score to 0
        Object.values(results).includes('fail') ? 'Failed' : 'Passed', // If any result is 'fail', set status to 'Failed'
        true, // Is Mandatory
        ''
    );    

    const testResults = new TestResults();
    const GUID = "d805050e-a0d8-49b0-afbd-46a486105170";  // Generate a unique GUID for each test case
    testResults.testCaseResults[GUID] = testCaseResult;
    testResults.customData = 'Custom data goes here';  // Placeholder for custom data

    return testResults;
}

// Generate XML report (just like Angular code)
function generateXmlReport(result) {
    const xml = xmlBuilder.create('test-cases')
        .ele('case')
        .ele('test-case-type', result.status)
        .up()
        .ele('name', result.methodName)
        .up()
        .ele('status', result.status)
        .up()
        .end({ pretty: true });
    return xml;
}

// Function to write to output files
function writeOutputFiles(result, fileType) {
    let resultStatus = result.status === 'Passed' ? 'PASS' : 'FAIL';
    let output = `${result.methodName}=${resultStatus}\n`;

    const outputFiles = {
        functional: "./output_revised.txt",
        boundary: "./output_boundary_revised.txt",
        exception: "./output_exception_revised.txt",
        xml: "./yaksha-test-cases.xml"
    };

    // Choose the file based on the type
    let outputFilePath = outputFiles[fileType];
    if (outputFilePath) {
        fs.appendFileSync(outputFilePath, output);
    }
}

// Read the custom.ih file (similar to Angular code)
function readCustomFile() {
    let customData = '';
    try {
        customData = fs.readFileSync('../custom.ih', 'utf8');
    } catch (err) {
        console.error('Error reading custom.ih file:', err);
    }
    return customData;
}

// Dynamic function to handle the test case execution
async function handleTestCase(filePath, testCaseName, testCaseType, testLogic, extraParams = {}) {
    try {
        const data = fs.readFileSync(filePath, 'utf8');

        // Read custom.ih file content
        const customData = readCustomFile();

        // Execute the test logic based on test case type
        const results = testLogic(data, ...extraParams);
        
        // Format test results and attach custom data
        const testResults = formatTestResults(results, testCaseName, testCaseType);
        testResults.customData = customData;

        // console.log(`${testCaseType} Results:`, results);
        console.log(`Sending data as:`, testResults);
        
        // Send results to the server
        const response = await axios.post('https://yaksha-prod-sbfn.azurewebsites.net/api/YakshaMFAEnqueue?code=jSTWTxtQ8kZgQ5FC0oLgoSgZG7UoU9Asnmxgp6hLLvYId/GW9ccoLw==', testResults, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        console.log(`${testCaseType} Test Case Server Response:`, response.data);

        // Generate XML report and save to file
        const xml = generateXmlReport(testResults.testCaseResults[Object.keys(testResults.testCaseResults)[0]]);
        fs.writeFileSync(`${testCaseType.toLowerCase().replace(' ', '-')}-test-report.xml`, xml);

        // Write to output files (functional, boundary, exception)
        writeOutputFiles(testResults.testCaseResults[Object.keys(testResults.testCaseResults)[0]], 'functional');
    } catch (error) {
        console.error(`Error executing ${testCaseType} test case:`, error);
    }
}

// File path for the HTML file to check
const filePath = 'index.html';

// Define test cases
const htmlTagsTestCase = {
    testCaseName: 'HTML Tags Test',
    testCaseType: 'boundary',
    testLogic: checkHtmlTags,
    extraParams: [['html', 'body', 'title', 'h2', 'table', 'thead', 'tr', 'th', 'tbody', 'td']]
};

const cssPropertiesTestCase = {
    testCaseName: 'CSS Properties Test',
    testCaseType: 'boundary',
    testLogic: checkCssProperties,
    extraParams: [[
        { selector: 'table', property: 'width', expectedValue: '80%' },
        { selector: 'table', property: 'margin', expectedValue: '50px auto' },
        { selector: 'th', property: 'background-color', expectedValue: 'rgb(76, 175, 80)' }, // #4CAF50 in RGB
        { selector: 'td', property: 'padding', expectedValue: '10px' }
    ]]
};

function executeAllTestCases() {
    // Delete the output files before running the tests
    deleteOutputFiles();
    
    // Execute both test cases dynamically
    handleTestCase(filePath, htmlTagsTestCase.testCaseName, htmlTagsTestCase.testCaseType, htmlTagsTestCase.testLogic, htmlTagsTestCase.extraParams);
    handleTestCase(filePath, cssPropertiesTestCase.testCaseName, cssPropertiesTestCase.testCaseType, cssPropertiesTestCase.testLogic, cssPropertiesTestCase.extraParams);
}

executeAllTestCases();